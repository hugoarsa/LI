1) (2 points)
1a) Is it true that for any two propositional formulas F and G, we have that ¬F ∨ G is a tautology
if and only if F |= G? Prove it using only the definition of propositional logic.

¬F ∨ G is a tautology
A I, eval(¬F ∨ G) ) = 1
A I, max(1 - eval(F) , eval(G)) = 1
A I, 1 - eval(F) = 1 or eval(G) = 1
A I, eval(F) = 0 or eval(G) = 1
A I, eval(F) = 1 then eval(G) = 1
F |= G
done.

1b) Is it true that for any three propositional formulas F, G, H, we have that F ∧ (G ∨ H) is a
tautology iff (¬G ∧ H) ∨ ¬F is unsatisfiable? Prove it using only the definition of propositional logic.

F ∧ (G ∨ H) taut
A I, min(eval(F),max(eval(G),eval(H))) = 1
A I, eval(F) = 1 and max(eval(G),eval(H))) = 1
A I, 1 - eval(F) = 0 and max(eval(G),eval(H))) = 1

... pinta falso

A I, 1 - eval(F) = 0 and min(1-eval(G),eval(H))) = 0
A I, 1 - eval(F) = 0 and min(1-eval(G),eval(H))) = 0
A I, max(min(1-eval(G),eval(H)),1-eval(F)) = 0
(¬G ∧ H) ∨ ¬F unsat

contraejemplo:

F: p v -p
G: q
H: -q

F ∧ (G ∨ H) is a tautology (p v -p) & (q v -q)

but (¬G ∧ H) ∨ ¬F is not unsat (-q & -q) v (p & -p) is sat !!

2) (2 points)
Our friend John has invented something he calls a “propositional database”, which consists of a set
of positive unit clauses (propositional symbols) and of a set of “rules” of the form:
Condition → Consequence, where Condition and Consequence are sets of propositional symbols.
I asked John what he considers to be true facts, or simply “facts”, in his database, and he said:
“the minimal set of facts such that all positive unit clauses are facts, and, for every rule
Condition → Consequence, if all elements of Condition are facts, then also all elements of Consequence
are facts”.
2a) Given such a database D, we want to know if a certain symbol p is a fact in D. Explain very
briefly. What is the cost of deciding this? How?
2b) I want to know how many facts are true in D. Explain very briefly. What is the cost of counting
this? How?

polinomial, we can put it as a horn clause! (a set of negated conditions or a single consequence for all)

3) (4 points) MaxSAT is a problem related to SAT. It takes as input a natural number k and a set S
of n propositional clauses over propositional symbols P, and it asks whether there is any interpretation
I : P → {0, 1} that satisfies at least k clauses of S.

3a) Do you think that MaxSAT is polynomial? NP-complete? Exponential? Why?

A) MaxSAT is NP-hard (not easier than general SAT for cnfs), since we can polynomially reduce SAT
(for cnfs) to MaxSat: SAT is the particular case of MaxSAT where k = n.
B) MaxSat is in NP (not harder than SAT) since one can polynomially reduce MaxSat to SAT as
shown in the answer to 3b. Another independent reason (without using 3b): MaxSat is in NP because
one can verify a given solution, an interpretation I, in polynomial (in fact, linear) time, checking
whether indeed I satisfies at least k clauses.

3b) Is it true that, using auxiliary variables, one can decide MaxSAT in a single call to a SAT solver?
Explain why.

It is, it would only take auxiliaty variables like aux1 -> Clause 1 for all clauses, and then do an at
most k for them
3c) How would you use a SAT solver to solve the optimization version of MaxSAT, that is, how to find
the I that satisfies as many of the clauses of S as possible? Give one single (and short) explanation.

Answer: For this we need more than one call to the SAT solver.
A) Run the solver on the input S′ defined as in 3b). Note that S′ is satisfiable (just set all ai’s to 1).
B) If it finds a model where m ai’s are false, run again with input S′ ∪ Card, where Card is the set
of clauses obtained by encoding the cardinality constraint ¬a1 + . . . + ¬an > m. Repeat step B (each
time finding models with more false a′
is), until the solver returns unsat. The last solution found is the
optimal one.
[Another algorithm is to make calls to the solver with S′ and a constraint ¬a1 + . . . + ¬an ≥ k,
where at the first call k is n; if it is unsatisfiable, then try n − 1, etc., until a model is found, which
is then optimal. Yet another algorithm is to do a binary search. But the first algorithm given here
works very well, because it is usually easier to find a model than to prove unsatisfiability and because
the improvement in solution quality at each iteration frequently is by more than 1.

3d) We want to 3-color a given graph with n nodes and m edges: assign one of the 3 colors to each
node such that for no edge (u, v) nodes u and v get the same color. Of course this may be impossible,
so we will allow some nodes to remain uncolored: they get no color. How can we use the ideas of 3b,c)
to compute the 3-coloring with the minimal number of such uncolored nodes?

As usual in graph coloring, define variables xi,c meaning “node i gets color c” and add
clauses ¬xu,c ∨ ¬xv,c for each edge (u, v) and color c. For each node i, to express that i gets at least
one color (here, of the 3 colors), we would have a clause xi,1 ∨ xi,2 ∨ xi,3, but to these clauses we add
the auxiliary variable ai, getting xi,1 ∨ xi,2 ∨ xi,3 ∨ ai. To express that at least k nodes get a color, add
the cardinality constraint ¬a1 + . . . + ¬an ≥ k, and then iteratively find the maximal k as in 3c).


4) (2 points) Is 3-SAT NP-complete? Explain your answer very briefly, using the fact that SAT
(deciding the satisfiability of an arbitrary propositional formula F ) is NP-complete.

3-SAT is the problem of deciding the satisfiability of a set of clauses S with at most 3
literals per clause. Yes, it is NP-complete. For this, we need to show two things:
A) 3-SAT is NP-hard (not easier than general SAT) since we can polynomially reduce SAT to 3-SAT:
the Tseitin transformation in polynomial time reduces SAT for an arbitrary F to a polynomial-sized
3-SAT set of clauses S that is equisatisfiable to F .
B) 3-SAT is in NP (not harder than SAT) since one can polynomially reduce 3-SAT to SAT: this is
trivial because 3-SAT is already a particular case of SAT (since S is already a propositional formula).
